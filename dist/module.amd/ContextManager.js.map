{"version":3,"file":"ContextManager.js","sources":["../../src/ContextManager.ts"],"sourcesContent":["import * as PathGenerator from \"./PathGenerator\";\r\n\r\nexport class ContextManager {\r\n    private _contexts: ContextsMap = new Map();\r\n    private _hrefs: HREFsArray = [];\r\n    private _index: number = -1;\r\n    private _length: number = 0;\r\n    /**\r\n     * Removes all references after the actual index\r\n     */\r\n    clean(): void {\r\n        if (this._index < this._length - 1) {\r\n            let index: number = this._index;\r\n            let newHREFs: HREFsArray = [];\r\n            this._hrefs.some(c_hrefs => {\r\n                let newCHrefs: string[] = [];\r\n                let result: boolean = c_hrefs[1].some(href => {\r\n                    // if index is still greater or equal to 0\r\n                    // then keep the reference else stop the loop\r\n                    if (index-- >= 0) {\r\n                        newCHrefs.push(href);\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n                if (newCHrefs.length) {\r\n                    newHREFs.push([c_hrefs[0], newCHrefs]);\r\n                }\r\n                return result;\r\n            });\r\n            this._hrefs = newHREFs;\r\n            this._length = this._index + 1;\r\n        }\r\n    }\r\n    currentContext(): string | null {\r\n        if (this._hrefs.length === 0) {\r\n            return null;\r\n        }\r\n        let index: number = this._index;\r\n        let context: string;\r\n        if (this._hrefs.some(([c, hrefs]) => {\r\n            context = c;\r\n            index -= hrefs.length;\r\n            return index < 0;\r\n        })) {\r\n            return context!;\r\n        }\r\n        return null;\r\n    }\r\n    contextOf(href: string, skipFallback: boolean = true): string | null {\r\n        let foundContext: string | null = null;\r\n        href = href.split(\"#\")[0].split(\"?\")[0];\r\n        for (let [context, [hrefs]] of this._contexts.entries()) {\r\n            if (hrefs.some(c_href => {\r\n                if (c_href!.fallback && skipFallback) {\r\n                    return false;\r\n                }\r\n                return c_href.path.test(href);\r\n            })) {\r\n                foundContext = context;\r\n                break;\r\n            }\r\n        }\r\n        return foundContext;\r\n    }\r\n    insert(href: string, replace: boolean = false): void {\r\n        this.clean();\r\n        // console.group(`ContextManager.insert(\"${href}\", ${replace})`);\r\n        // console.log(`current href: ${this.hrefs()}`);\r\n        // get context of href\r\n        let foundContext: string | null = this.contextOf(href, this._length > 0);\r\n        // console.log(`found context: ${foundContext}`);\r\n        let previousContext: HREFsArray[0] | null = this._hrefs.length > 0 ? this._hrefs[this._hrefs.length - 1] : null;\r\n        if (foundContext == null) {\r\n            if (this._hrefs.length > 0) {\r\n                this._hrefs[this._hrefs.length - 1][1].push(href);\r\n                this._length++;\r\n                this._index++;\r\n            }\r\n        } else {\r\n            let i: number = -1;\r\n            if (this._hrefs.some((c_hrefs, index) => {\r\n                if (c_hrefs[0] === foundContext) {\r\n                    i = index;\r\n                    return true;\r\n                }\r\n                return false;\r\n            })) {\r\n                let c_hrefs: [string, string[]] = this._hrefs.splice(i, 1)[0];\r\n                if (href !== c_hrefs[1][c_hrefs[1].length - 1]) {\r\n                    c_hrefs[1].push(href);\r\n                    this._length++;\r\n                    this._index++;\r\n                }\r\n                this._hrefs.push(c_hrefs);\r\n            } else {\r\n                this._hrefs.push([foundContext, [href]]);\r\n                this._length++;\r\n                this._index++;\r\n            }\r\n        }\r\n        if (replace && this._hrefs.length > 0) {\r\n            let lastContext: HREFsArray[0] = this._hrefs[this._hrefs.length - 1];\r\n            // console.log(\"replacing\");\r\n            if (previousContext != null) {\r\n                // console.log(`last context: [\"${ previousContext[0] }\", [${ previousContext[1] }] ]`);\r\n            } else {\r\n                // console.log(\"last context: null\");\r\n            }\r\n            // console.log(`current context: [\"${ lastContext[0] }\", [${ lastContext[1] }]]`);\r\n            if (lastContext === previousContext) {\r\n                if (lastContext[1].length > 1) {\r\n                    do {\r\n                        lastContext[1].splice(-2, 1);\r\n                        this._length--;\r\n                        this._index--;\r\n                    } while (\r\n                        lastContext[1].length > 1 &&\r\n                        lastContext[1][lastContext[1].length - 2] === href\r\n                    );\r\n                    // console.log(`final hrefs: ${ lastContext[1] }`);\r\n                }\r\n            } else if (previousContext != null) {\r\n                previousContext[1].splice(-1, 1);\r\n                this._length--;\r\n                this._index--;\r\n            }\r\n        }\r\n        // console.groupEnd();\r\n    }\r\n    goBackward(): string {\r\n        // console.group(\"ContextManager.goBackward()\");\r\n        // console.log(`current index: ${this._index}`);\r\n        this._index = Math.max(--this._index, 0);\r\n        // console.log(`new index: ${this._index}`);\r\n        // console.groupEnd();\r\n        return this.get()!;\r\n    }\r\n    goForward(): string {\r\n        // console.group(\"ContextManager.goForward()\");\r\n        // console.log(`current index: ${this._index}`);\r\n        this._index = Math.min(++this._index, this._length - 1);\r\n        // console.log(`new index: ${this._index}`);\r\n        // console.groupEnd();\r\n        return this.get()!;\r\n    }\r\n    get(index: number = this._index): string | null {\r\n        let href: string;\r\n        if (this._hrefs.some(([c, hrefs]) => {\r\n            let length: number = hrefs.length;\r\n            if (index >= length) {\r\n                index -= length;\r\n                return false;\r\n            }\r\n            href = hrefs[index];\r\n            return true;\r\n        })) {\r\n            return href!;\r\n        }\r\n        return null;\r\n    }\r\n    index(): number;\r\n    index(value: number): void;\r\n    index(value?: number): void | number {\r\n        if (value === void 0) {\r\n            return this._index;\r\n        }\r\n        value = parseInt(value as any, 10);\r\n        if (isNaN(value)) {\r\n            throw new Error(\"value must be a number\");\r\n        }\r\n        // console.group(`ContextManager.index(${value})`);\r\n        // console.log(`current hrefs: ${this.hrefs()}`);\r\n        this._index = value;\r\n        // console.groupEnd();\r\n    }\r\n    length(): number {\r\n        return this._length;\r\n    }\r\n    getContextNames(): string[] {\r\n        return Array.from(this._contexts.keys());\r\n    }\r\n    getDefaultOf(context: string): string | null {\r\n        let c: ContextInfo | undefined = this._contexts.get(context);\r\n        if (!c) {\r\n            return null;\r\n        }\r\n        let href: string | null | undefined = c[1];\r\n        if (href == null) {\r\n            return null;\r\n        }\r\n        return href;\r\n    }\r\n    restore(context: string): boolean {\r\n        let tmpHREFs: HREFsArray = this._hrefs;\r\n        this.clean();\r\n        if (this._hrefs.length) {\r\n            let lastContext: HREFsArray[0] = this._hrefs[this._hrefs.length - 1];\r\n            if (lastContext[0] === context) {\r\n                let path: string = this._contexts.get(context)![1] || lastContext[1][0];\r\n                let numPages: number = lastContext[1].splice(1).length;\r\n                this._length -= numPages;\r\n                this._index -= numPages;\r\n                lastContext[1][0] = path;\r\n                return true;\r\n            }\r\n        }\r\n        if (!this._hrefs.some((c, i) => {\r\n            if (c[0] === context) {\r\n                if (i < this._hrefs.length - 1) {\r\n                    this._hrefs.push(this._hrefs.splice(i, 1)[0]);\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        })) {\r\n            let c: ContextInfo | undefined = this._contexts.get(context);\r\n            if (c == null) {\r\n                this._hrefs = tmpHREFs;\r\n                return false;\r\n            }\r\n            let href: string | null | undefined = c[1];\r\n            if (href != null) {\r\n                this.insert(href);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    addContextPath(context_name: string, path: string, fallback: boolean = false): RegExp {\r\n        let pathRegexp: RegExp = PathGenerator.generate(path);\r\n        let context: ContextInfo | undefined = this._contexts.get(context_name);\r\n        if (context == null) {\r\n            this._contexts.set(context_name, context = [[], null]);\r\n        }\r\n        context[0].push({\r\n            path: pathRegexp,\r\n            fallback\r\n        });\r\n        return pathRegexp;\r\n    }\r\n    setContextDefaultHref(context_name: string, href: string | null): void {\r\n        let context: ContextInfo | undefined = this._contexts.get(context_name);\r\n        if (context == null) {\r\n            this._contexts.set(context_name, context = [[], null]);\r\n        }\r\n        context[1] = href;\r\n    }\r\n    setContext(context: {\r\n        name: string,\r\n        paths: { path: string, fallback?: boolean }[],\r\n        default?: string | null\r\n    }): void {\r\n        context.paths.forEach(path => {\r\n            this.addContextPath(context.name, path.path, path.fallback);\r\n        });\r\n        if (context.default !== undefined) {\r\n            this.setContextDefaultHref(context.name, context.default);\r\n        }\r\n    }\r\n    hrefs(): string[] {\r\n        let hrefs: string[] = [];\r\n        this._hrefs.forEach(([c, c_hrefs]) => {\r\n            hrefs.push.apply(hrefs, c_hrefs);\r\n        });\r\n        return hrefs;\r\n    }\r\n}\r\n\r\nexport interface IContextPath {\r\n    path: RegExp;\r\n    fallback: boolean;\r\n}\r\n\r\n// [ paths, default_href ]\r\nexport type ContextInfo = [ IContextPath[], string | null | undefined ];\r\n\r\n// ( context_name, ContextInfo )\r\nexport type ContextsMap = Map<string, ContextInfo>;\r\n\r\n// [ context_name, hrefs ][]\r\nexport type HREFsArray = [ string, string[] ][];"],"names":["__read","__values","PathGenerator.generate"],"mappings":"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"}